import re
import customtkinter
from CTkListbox import *

def validate(new_value):
    return len(new_value) <= 30 and new_value.isalpha() or new_value == ""

def validate_2(new_value):
    return re.match("^\d{0,3}$", new_value) is not None

def fill_empty_with_zero(event):
    if not event.widget.get().strip():
        event.widget.insert(0, "0")

class CharacterSheetView(customtkinter.CTkFrame):
    def __init__(self, parent, config):
        self.config = config

        super().__init__(parent)
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)

        # TabView
        self.tabview = customtkinter.CTkTabview(self, width=600)
        self.tabview.add("Summary")
        self.tabview.add("Combat")
        self.tabview.tab("Combat").rowconfigure(index=7, minsize=50)
        self.tabview.add("Skills")
        self.tabview.add("Spells")
        self.tabview.tab("Spells").rowconfigure(index=1, minsize=30)
        self.tabview.add("Gear")
        self.tabview.add("Companion")

        # List of Saved Characters
        self.listbox = CTkListbox(self, width=300, border_width=1, border_color=config["COLORS"]["BUTTON"], text_color=config["COLORS"]["TEXT"], hover_color=config["COLORS"]["HOVER"])

        # Summary Tab widgets
        self.character_name_label = customtkinter.CTkLabel(self.tabview.tab("Summary"), text="Character Name: ", text_color=config["COLORS"]["TEXT"])
        self.character_name_var = customtkinter.StringVar()
        self.character_name = customtkinter.CTkEntry(self.tabview.tab("Summary"), textvariable=self.character_name_var, text_color=config["COLORS"]["TEXT"])

        self.character_player_label = customtkinter.CTkLabel(self.tabview.tab("Summary"), text="Player Name: ", text_color=config["COLORS"]["TEXT"])
        self.character_player_var = customtkinter.StringVar()
        self.character_player = customtkinter.CTkEntry(self.tabview.tab("Summary"), text_color=config["COLORS"]["TEXT"])

        self.character_alignment_label = customtkinter.CTkLabel(self.tabview.tab("Summary"), text="Alignment: ", text_color=config["COLORS"]["TEXT"])
        self.character_alignment_var = customtkinter.StringVar()
        self.character_alignment = customtkinter.CTkComboBox(self.tabview.tab("Summary"), text_color=config["COLORS"]["TEXT"], variable=self.character_alignment_var)

        self.character_class_label = customtkinter.CTkLabel(self.tabview.tab("Summary"), text="Class & lvl: ", text_color=config["COLORS"]["TEXT"])
        self.character_class_var = customtkinter.StringVar()
        self.character_class = customtkinter.CTkComboBox(self.tabview.tab("Summary"), text_color=config["COLORS"]["TEXT"], variable=self.character_class_var)
        self.character_lvl_var = customtkinter.StringVar()
        self.character_lvl = customtkinter.CTkComboBox(self.tabview.tab("Summary"), text_color=config["COLORS"]["TEXT"], variable=self.character_lvl_var, width=80)

        self.character_deity_label = customtkinter.CTkLabel(self.tabview.tab("Summary"), text="Deity: ", text_color=config["COLORS"]["TEXT"])
        self.character_deity_var = customtkinter.StringVar()
        self.character_deity = customtkinter.CTkComboBox(self.tabview.tab("Summary"), text_color=config["COLORS"]["TEXT"], variable=self.character_deity_var)

        self.character_homeland_label = customtkinter.CTkLabel(self.tabview.tab("Summary"), text="Homeland: ", text_color=config["COLORS"]["TEXT"])
        self.character_homeland_var = customtkinter.StringVar()
        self.character_homeland = customtkinter.CTkEntry(self.tabview.tab("Summary"), textvariable=self.character_homeland_var, text_color=config["COLORS"]["TEXT"])

        self.character_race_label = customtkinter.CTkLabel(self.tabview.tab("Summary"), text="Race: ", text_color=config["COLORS"]["TEXT"])
        self.character_race_var = customtkinter.StringVar()
        self.character_race = customtkinter.CTkComboBox(self.tabview.tab("Summary"), text_color=config["COLORS"]["TEXT"], variable=self.character_race_var)

        self.character_size_label = customtkinter.CTkLabel(self.tabview.tab("Summary"), text="Size: ", text_color=config["COLORS"]["TEXT"])
        self.character_size = customtkinter.CTkLabel(self.tabview.tab("Summary"), text="Medium", text_color=config["COLORS"]["TEXT"], state="disabled")

        self.character_gender_label = customtkinter.CTkLabel(self.tabview.tab("Summary"), text="Gender: ", text_color=config["COLORS"]["TEXT"])
        self.character_gender_var = customtkinter.StringVar()
        self.character_gender = customtkinter.CTkComboBox(self.tabview.tab("Summary"), text_color=config["COLORS"]["TEXT"], variable=self.character_gender_var)

        self.racial_trait_frame = customtkinter.CTkScrollableFrame(self.tabview.tab("Summary"), corner_radius=10, border_width=1, border_color=config["COLORS"]["BUTTON"], label_text="Racial Traits", label_anchor="center")
        self.feats_frame = customtkinter.CTkScrollableFrame(self.tabview.tab("Summary"), corner_radius=10, border_width=1, border_color=config["COLORS"]["BUTTON"], label_text="Feats", label_anchor="center")

        self.character_languages = customtkinter.CTkLabel(self.tabview.tab("Summary"), text="Languages: ", text_color=config["COLORS"]["TEXT"])

        # Combat Tab widgets
        self.ability_score_label = customtkinter.CTkLabel(self.tabview.tab("Combat"), text="Ability Score", text_color=config["COLORS"]["TEXT"])
        self.ability_increase_label = customtkinter.CTkLabel(self.tabview.tab("Combat"), text="Ability Increase", text_color=config["COLORS"]["TEXT"])
        self.other_modifiers_label = customtkinter.CTkLabel(self.tabview.tab("Combat"), text="Other Modifiers", text_color=config["COLORS"]["TEXT"])
        self.ability_sum_label = customtkinter.CTkLabel(self.tabview.tab("Combat"), text="Ability Sum", text_color=config["COLORS"]["TEXT"])
        self.ability_modifier_label = customtkinter.CTkLabel(self.tabview.tab("Combat"), text="Ability Modifier", text_color=config["COLORS"]["TEXT"])

        self.str_label = customtkinter.CTkLabel(self.tabview.tab("Combat"), text="STR:", text_color=config["COLORS"]["TEXT"])
        self.str_ability_score_var = customtkinter.StringVar()
        self.str_ability_score = customtkinter.CTkEntry(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.str_ability_score_var, width=35)
        self.str_ability_increase_var = customtkinter.StringVar()
        self.str_ability_increase = customtkinter.CTkEntry(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.str_ability_increase_var, width=35)
        self.str_other_mod_var = customtkinter.StringVar()
        self.str_other_mod = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.str_other_mod_var, text_color=config["COLORS"]["TEXT"])
        self.str_sum_var = customtkinter.StringVar()
        self.str_sum = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.str_sum_var, text_color=config["COLORS"]["TEXT"])
        self.str_mod_var = customtkinter.StringVar()
        self.str_mod = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.str_mod_var, text_color=config["COLORS"]["TEXT"])

        self.dex_label = customtkinter.CTkLabel(self.tabview.tab("Combat"), text="DEX:", text_color=config["COLORS"]["TEXT"])
        self.dex_ability_score_var = customtkinter.StringVar()
        self.dex_ability_score = customtkinter.CTkEntry(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.dex_ability_score_var, width=35)
        self.dex_ability_increase_var = customtkinter.StringVar()
        self.dex_ability_increase = customtkinter.CTkEntry(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.dex_ability_increase_var, width=35)
        self.dex_other_mod_var = customtkinter.StringVar()
        self.dex_other_mod = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.dex_other_mod_var, text_color=config["COLORS"]["TEXT"])
        self.dex_sum_var = customtkinter.StringVar()
        self.dex_sum = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.dex_sum_var, text_color=config["COLORS"]["TEXT"])
        self.dex_mod_var = customtkinter.StringVar()
        self.dex_mod = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.dex_mod_var, text_color=config["COLORS"]["TEXT"])

        self.con_label = customtkinter.CTkLabel(self.tabview.tab("Combat"), text="CON:", text_color=config["COLORS"]["TEXT"])
        self.con_ability_score_var = customtkinter.StringVar()
        self.con_ability_score = customtkinter.CTkEntry(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.con_ability_score_var, width=35)
        self.con_ability_increase_var = customtkinter.StringVar()
        self.con_ability_increase = customtkinter.CTkEntry(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.con_ability_increase_var, width=35)
        self.con_other_mod_var = customtkinter.StringVar()
        self.con_other_mod = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.con_other_mod_var, text_color=config["COLORS"]["TEXT"])
        self.con_sum_var = customtkinter.StringVar()
        self.con_sum = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.con_sum_var, text_color=config["COLORS"]["TEXT"])
        self.con_mod_var = customtkinter.StringVar()
        self.con_mod = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.con_mod_var, text_color=config["COLORS"]["TEXT"])

        self.int_label = customtkinter.CTkLabel(self.tabview.tab("Combat"), text="INT:", text_color=config["COLORS"]["TEXT"])
        self.int_ability_score_var = customtkinter.StringVar()
        self.int_ability_score = customtkinter.CTkEntry(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.int_ability_score_var, width=35)
        self.int_ability_increase_var = customtkinter.StringVar()
        self.int_ability_increase = customtkinter.CTkEntry(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.int_ability_increase_var, width=35)
        self.int_other_mod_var = customtkinter.StringVar()
        self.int_other_mod = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.int_other_mod_var, text_color=config["COLORS"]["TEXT"])
        self.int_sum_var = customtkinter.StringVar()
        self.int_sum = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.int_sum_var, text_color=config["COLORS"]["TEXT"])
        self.int_mod_var = customtkinter.StringVar()
        self.int_mod = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.int_mod_var, text_color=config["COLORS"]["TEXT"])

        self.wis_label = customtkinter.CTkLabel(self.tabview.tab("Combat"), text="WIS:", text_color=config["COLORS"]["TEXT"])
        self.wis_ability_score_var = customtkinter.StringVar()
        self.wis_ability_score = customtkinter.CTkEntry(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.wis_ability_score_var, width=35)
        self.wis_ability_increase_var = customtkinter.StringVar()
        self.wis_ability_increase = customtkinter.CTkEntry(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.wis_ability_increase_var, width=35)
        self.wis_other_mod_var = customtkinter.StringVar()
        self.wis_other_mod = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.wis_other_mod_var, text_color=config["COLORS"]["TEXT"])
        self.wis_sum_var = customtkinter.StringVar()
        self.wis_sum = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.wis_sum_var, text_color=config["COLORS"]["TEXT"])
        self.wis_mod_var = customtkinter.StringVar()
        self.wis_mod = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.wis_mod_var, text_color=config["COLORS"]["TEXT"])

        self.cha_label = customtkinter.CTkLabel(self.tabview.tab("Combat"), text="CHA:", text_color=config["COLORS"]["TEXT"])
        self.cha_ability_score_var = customtkinter.StringVar()
        self.cha_ability_score = customtkinter.CTkEntry(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.cha_ability_score_var, width=35)
        self.cha_ability_increase_var = customtkinter.StringVar()
        self.cha_ability_increase = customtkinter.CTkEntry(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.cha_ability_increase_var, width=35)
        self.cha_other_mod_var = customtkinter.StringVar()
        self.cha_other_mod = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.cha_other_mod_var, text_color=config["COLORS"]["TEXT"])
        self.cha_sum_var = customtkinter.StringVar()
        self.cha_sum = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.cha_sum_var, text_color=config["COLORS"]["TEXT"])
        self.cha_mod_var = customtkinter.StringVar()
        self.cha_mod = customtkinter.CTkLabel(self.tabview.tab("Combat"), textvariable=self.cha_mod_var, text_color=config["COLORS"]["TEXT"])

        self.character_hp_var = customtkinter.StringVar()
        self.character_hp = customtkinter.CTkEntry(self.tabview.tab("Combat"), width=35, textvariable=self.character_hp_var)

        self.character_initiative_var = customtkinter.StringVar()
        self.character_initiative = customtkinter.CTkLabel(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.character_initiative_var)

        self.character_ac_sum_var = customtkinter.StringVar()
        self.character_ac_sum = customtkinter.CTkLabel(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.character_ac_sum_var)
        self.character_touch_ac_var = customtkinter.StringVar()
        self.character_touch_ac = customtkinter.CTkLabel(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.character_touch_ac_var)
        self.character_flatfooted_ac_var = customtkinter.StringVar()
        self.character_flatfooted_ac = customtkinter.CTkLabel(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.character_flatfooted_ac_var)

        self.character_fort_save_sum_var = customtkinter.StringVar()
        self.character_fort_save_sum = customtkinter.CTkLabel(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.character_fort_save_sum_var)
        self.character_ref_save_sum_var = customtkinter.StringVar()
        self.character_ref_save_sum = customtkinter.CTkLabel(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.character_ref_save_sum_var)
        self.character_will_save_sum_var = customtkinter.StringVar()
        self.character_will_save_sum = customtkinter.CTkLabel(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.character_will_save_sum_var)

        self.character_bab_var = customtkinter.StringVar()
        self.character_bab = customtkinter.CTkLabel(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.character_bab_var)

        self.character_spell_resist_var = customtkinter.StringVar()
        self.character_spell_resist = customtkinter.CTkLabel(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.character_spell_resist_var)

        self.character_cmb_sum_var = customtkinter.StringVar()
        self.character_cmb_sum = customtkinter.CTkLabel(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.character_cmb_sum_var)
        self.character_cmd_sum_var = customtkinter.StringVar()
        self.character_cmd_sum = customtkinter.CTkLabel(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.character_cmd_sum_var)

        self.character_speed_var = customtkinter.StringVar()
        self.character_speed = customtkinter.CTkLabel(self.tabview.tab("Combat"), text_color=config["COLORS"]["TEXT"], textvariable=self.character_speed_var)

        # Skill widgets
        self.skill_frame = customtkinter.CTkScrollableFrame(self.tabview.tab("Skills"), width=600, height=600)
        self.skill_frame.grid_rowconfigure(index=1, minsize=30)

        self.skill_name_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Skill Names")
        self.total_bonus_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Total Bonus")
        self.ability_mod_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Ability Mod.")
        self.ranks_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Ranks")
        self.misc_mod_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Misc Mod.")
        self.acrobatics_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Acrobatics (DEX)")
        self.acrobatics_total_var = customtkinter.StringVar()
        self.acrobatics_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.acrobatics_total_var)
        self.acrobatics_abilitymod_var = customtkinter.StringVar()
        self.acrobatics_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.acrobatics_abilitymod_var)
        self.acrobatics_ranks_var = customtkinter.StringVar()
        self.acrobatics_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.acrobatics_ranks_var, width=35)
        self.acrobatics_miscmod_var = customtkinter.StringVar()
        self.acrobatics_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.acrobatics_miscmod_var)
        self.appraise_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Appraise (INT)")
        self.appraise_total_var = customtkinter.StringVar()
        self.appraise_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.appraise_total_var)
        self.appraise_abilitymod_var = customtkinter.StringVar()
        self.appraise_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.appraise_abilitymod_var)
        self.appraise_ranks_var = customtkinter.StringVar()
        self.appraise_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.appraise_ranks_var, width=35)
        self.appraise_miscmod_var = customtkinter.StringVar()
        self.appraise_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.appraise_miscmod_var)
        self.bluff_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Bluff (CHA)")
        self.bluff_total_var = customtkinter.StringVar()
        self.bluff_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.bluff_total_var)
        self.bluff_abilitymod_var = customtkinter.StringVar()
        self.bluff_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.bluff_abilitymod_var)
        self.bluff_ranks_var = customtkinter.StringVar()
        self.bluff_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.bluff_ranks_var, width=35)
        self.bluff_miscmod_var = customtkinter.StringVar()
        self.bluff_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.bluff_miscmod_var)
        self.climb_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Climb (STR)")
        self.climb_total_var = customtkinter.StringVar()
        self.climb_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.climb_total_var)
        self.climb_abilitymod_var = customtkinter.StringVar()
        self.climb_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.climb_abilitymod_var)
        self.climb_ranks_var = customtkinter.StringVar()
        self.climb_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.climb_ranks_var, width=35)
        self.climb_miscmod_var = customtkinter.StringVar()
        self.climb_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.climb_miscmod_var)
        self.craft_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Craft (INT)")
        self.craft_total_var = customtkinter.StringVar()
        self.craft_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.craft_total_var)
        self.craft_abilitymod_var = customtkinter.StringVar()
        self.craft_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.craft_abilitymod_var)
        self.craft_ranks_var = customtkinter.StringVar()
        self.craft_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.craft_ranks_var, width=35)
        self.craft_miscmod_var = customtkinter.StringVar()
        self.craft_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.craft_miscmod_var)
        self.diplomacy_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Diplomacy (CHA)")
        self.diplomacy_total_var = customtkinter.StringVar()
        self.diplomacy_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.diplomacy_total_var)
        self.diplomacy_abilitymod_var = customtkinter.StringVar()
        self.diplomacy_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.diplomacy_abilitymod_var)
        self.diplomacy_ranks_var = customtkinter.StringVar()
        self.diplomacy_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.diplomacy_ranks_var, width=35)
        self.diplomacy_miscmod_var = customtkinter.StringVar()
        self.diplomacy_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.diplomacy_miscmod_var)
        self.disable_device_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Disable Device (DEX)")
        self.disable_device_total_var = customtkinter.StringVar()
        self.disable_device_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.disable_device_total_var)
        self.disable_device_abilitymod_var = customtkinter.StringVar()
        self.disable_device_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.disable_device_abilitymod_var)
        self.disable_device_ranks_var = customtkinter.StringVar()
        self.disable_device_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.disable_device_ranks_var, width=35)
        self.disable_device_miscmod_var = customtkinter.StringVar()
        self.disable_device_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.disable_device_miscmod_var)
        self.disguise_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Disguise (CHA)")
        self.disguise_total_var = customtkinter.StringVar()
        self.disguise_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.disguise_total_var)
        self.disguise_abilitymod_var = customtkinter.StringVar()
        self.disguise_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.disguise_abilitymod_var)
        self.disguise_ranks_var = customtkinter.StringVar()
        self.disguise_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.disguise_ranks_var, width=35)
        self.disguise_miscmod_var = customtkinter.StringVar()
        self.disguise_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.disguise_miscmod_var)
        self.escape_artist_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Escape Artist (DEX)")
        self.escape_artist_total_var = customtkinter.StringVar()
        self.escape_artist_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.escape_artist_total_var)
        self.escape_artist_abilitymod_var = customtkinter.StringVar()
        self.escape_artist_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.escape_artist_abilitymod_var)
        self.escape_artist_ranks_var = customtkinter.StringVar()
        self.escape_artist_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.escape_artist_ranks_var, width=35)
        self.escape_artist_miscmod_var = customtkinter.StringVar()
        self.escape_artist_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.escape_artist_miscmod_var)
        self.fly_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Fly (DEX)")
        self.fly_total_var = customtkinter.StringVar()
        self.fly_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.fly_total_var)
        self.fly_abilitymod_var = customtkinter.StringVar()
        self.fly_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.fly_abilitymod_var)
        self.fly_ranks_var = customtkinter.StringVar()
        self.fly_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.fly_ranks_var, width=35)
        self.fly_miscmod_var = customtkinter.StringVar()
        self.fly_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.fly_miscmod_var)
        self.handle_animal_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Handle Animal (CHA)")
        self.handle_animal_total_var = customtkinter.StringVar()
        self.handle_animal_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.handle_animal_total_var)
        self.handle_animal_abilitymod_var = customtkinter.StringVar()
        self.handle_animal_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.handle_animal_abilitymod_var)
        self.handle_animal_ranks_var = customtkinter.StringVar()
        self.handle_animal_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.handle_animal_ranks_var, width=35)
        self.handle_animal_miscmod_var = customtkinter.StringVar()
        self.handle_animal_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.handle_animal_miscmod_var)
        self.heal_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Heal (WIS)")
        self.heal_total_var = customtkinter.StringVar()
        self.heal_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.heal_total_var)
        self.heal_abilitymod_var = customtkinter.StringVar()
        self.heal_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.heal_abilitymod_var)
        self.heal_ranks_var = customtkinter.StringVar()
        self.heal_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.heal_ranks_var, width=35)
        self.heal_miscmod_var = customtkinter.StringVar()
        self.heal_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.heal_miscmod_var)
        self.intimidate_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Intimidate (CHA)")
        self.intimidate_total_var = customtkinter.StringVar()
        self.intimidate_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.intimidate_total_var)
        self.intimidate_abilitymod_var = customtkinter.StringVar()
        self.intimidate_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.intimidate_abilitymod_var)
        self.intimidate_ranks_var = customtkinter.StringVar()
        self.intimidate_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.intimidate_ranks_var, width=35)
        self.intimidate_miscmod_var = customtkinter.StringVar()
        self.intimidate_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.intimidate_miscmod_var)
        self.knowledge_arcana_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Knowledge (Arcana)(INT)")
        self.knowledge_arcana_total_var = customtkinter.StringVar()
        self.knowledge_arcana_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_arcana_total_var)
        self.knowledge_arcana_abilitymod_var = customtkinter.StringVar()
        self.knowledge_arcana_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_arcana_abilitymod_var)
        self.knowledge_arcana_ranks_var = customtkinter.StringVar()
        self.knowledge_arcana_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_arcana_ranks_var, width=35)
        self.knowledge_arcana_miscmod_var = customtkinter.StringVar()
        self.knowledge_arcana_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_arcana_miscmod_var)
        self.knowledge_dungeoneering_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Knowledge (Dungeoneering)(INT)")
        self.knowledge_dungeoneering_total_var = customtkinter.StringVar()
        self.knowledge_dungeoneering_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_dungeoneering_total_var)
        self.knowledge_dungeoneering_abilitymod_var = customtkinter.StringVar()
        self.knowledge_dungeoneering_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_dungeoneering_abilitymod_var)
        self.knowledge_dungeoneering_ranks_var = customtkinter.StringVar()
        self.knowledge_dungeoneering_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_dungeoneering_ranks_var, width=35)
        self.knowledge_dungeoneering_miscmod_var = customtkinter.StringVar()
        self.knowledge_dungeoneering_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_dungeoneering_miscmod_var)
        self.knowledge_engineering_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Knowledge (Engineering)(INT)")
        self.knowledge_engineering_total_var = customtkinter.StringVar()
        self.knowledge_engineering_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_engineering_total_var)
        self.knowledge_engineering_abilitymod_var = customtkinter.StringVar()
        self.knowledge_engineering_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_engineering_abilitymod_var)
        self.knowledge_engineering_ranks_var = customtkinter.StringVar()
        self.knowledge_engineering_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_engineering_ranks_var, width=35)
        self.knowledge_engineering_miscmod_var = customtkinter.StringVar()
        self.knowledge_engineering_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_engineering_miscmod_var)
        self.knowledge_geography_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Knowledge (Geography)(INT)")
        self.knowledge_geography_total_var = customtkinter.StringVar()
        self.knowledge_geography_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_geography_total_var)
        self.knowledge_geography_abilitymod_var = customtkinter.StringVar()
        self.knowledge_geography_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_geography_abilitymod_var)
        self.knowledge_geography_ranks_var = customtkinter.StringVar()
        self.knowledge_geography_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_geography_ranks_var, width=35)
        self.knowledge_geography_miscmod_var = customtkinter.StringVar()
        self.knowledge_geography_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_geography_miscmod_var)
        self.knowledge_history_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Knowledge (History)(INT)")
        self.knowledge_history_total_var = customtkinter.StringVar()
        self.knowledge_history_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_history_total_var)
        self.knowledge_history_abilitymod_var = customtkinter.StringVar()
        self.knowledge_history_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_history_abilitymod_var)
        self.knowledge_history_ranks_var = customtkinter.StringVar()
        self.knowledge_history_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_history_ranks_var, width=35)
        self.knowledge_history_miscmod_var = customtkinter.StringVar()
        self.knowledge_history_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_history_miscmod_var)
        self.knowledge_local_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Knowledge (Local)(INT)")
        self.knowledge_local_total_var = customtkinter.StringVar()
        self.knowledge_local_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_local_total_var)
        self.knowledge_local_abilitymod_var = customtkinter.StringVar()
        self.knowledge_local_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_local_abilitymod_var)
        self.knowledge_local_ranks_var = customtkinter.StringVar()
        self.knowledge_local_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_local_ranks_var, width=35)
        self.knowledge_local_miscmod_var = customtkinter.StringVar()
        self.knowledge_local_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_local_miscmod_var)
        self.knowledge_nature_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Knowledge (Nature)(INT)")
        self.knowledge_nature_total_var = customtkinter.StringVar()
        self.knowledge_nature_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_nature_total_var)
        self.knowledge_nature_abilitymod_var = customtkinter.StringVar()
        self.knowledge_nature_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_nature_abilitymod_var)
        self.knowledge_nature_ranks_var = customtkinter.StringVar()
        self.knowledge_nature_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_nature_ranks_var, width=35)
        self.knowledge_nature_miscmod_var = customtkinter.StringVar()
        self.knowledge_nature_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_nature_miscmod_var)
        self.knowledge_nobility_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Knowledge (Nobility)(INT)")
        self.knowledge_nobility_total_var = customtkinter.StringVar()
        self.knowledge_nobility_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_nobility_total_var)
        self.knowledge_nobility_abilitymod_var = customtkinter.StringVar()
        self.knowledge_nobility_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_nobility_abilitymod_var)
        self.knowledge_nobility_ranks_var = customtkinter.StringVar()
        self.knowledge_nobility_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_nobility_ranks_var, width=35)
        self.knowledge_nobility_miscmod_var = customtkinter.StringVar()
        self.knowledge_nobility_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_nobility_miscmod_var)
        self.knowledge_planes_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Knowledge (Planes)(INT)")
        self.knowledge_planes_total_var = customtkinter.StringVar()
        self.knowledge_planes_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_planes_total_var)
        self.knowledge_planes_abilitymod_var = customtkinter.StringVar()
        self.knowledge_planes_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_planes_abilitymod_var)
        self.knowledge_planes_ranks_var = customtkinter.StringVar()
        self.knowledge_planes_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_planes_ranks_var, width=35)
        self.knowledge_planes_miscmod_var = customtkinter.StringVar()
        self.knowledge_planes_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_planes_miscmod_var)
        self.knowledge_religion_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Knowledge (Religion)(INT)")
        self.knowledge_religion_total_var = customtkinter.StringVar()
        self.knowledge_religion_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_religion_total_var)
        self.knowledge_religion_abilitymod_var = customtkinter.StringVar()
        self.knowledge_religion_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_religion_abilitymod_var)
        self.knowledge_religion_ranks_var = customtkinter.StringVar()
        self.knowledge_religion_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_religion_ranks_var, width=35)
        self.knowledge_religion_miscmod_var = customtkinter.StringVar()
        self.knowledge_religion_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.knowledge_religion_miscmod_var)
        self.linguistics_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Linguistics (INT)")
        self.linguistics_total_var = customtkinter.StringVar()
        self.linguistics_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.linguistics_total_var)
        self.linguistics_abilitymod_var = customtkinter.StringVar()
        self.linguistics_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.linguistics_abilitymod_var)
        self.linguistics_ranks_var = customtkinter.StringVar()
        self.linguistics_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.linguistics_ranks_var, width=35)
        self.linguistics_miscmod_var = customtkinter.StringVar()
        self.linguistics_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.linguistics_miscmod_var)
        self.perception_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Perception (WIS)")
        self.perception_total_var = customtkinter.StringVar()
        self.perception_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.perception_total_var)
        self.perception_abilitymod_var = customtkinter.StringVar()
        self.perception_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.perception_abilitymod_var)
        self.perception_ranks_var = customtkinter.StringVar()
        self.perception_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.perception_ranks_var, width=35)
        self.perception_miscmod_var = customtkinter.StringVar()
        self.perception_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.perception_miscmod_var)
        self.perform_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Perform (CHA)")
        self.perform_total_var = customtkinter.StringVar()
        self.perform_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.perform_total_var)
        self.perform_abilitymod_var = customtkinter.StringVar()
        self.perform_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.perform_abilitymod_var)
        self.perform_ranks_var = customtkinter.StringVar()
        self.perform_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.perform_ranks_var, width=35)
        self.perform_miscmod_var = customtkinter.StringVar()
        self.perform_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.perform_miscmod_var)
        self.profession_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Profession (WIS)")
        self.profession_total_var = customtkinter.StringVar()
        self.profession_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.profession_total_var)
        self.profession_abilitymod_var = customtkinter.StringVar()
        self.profession_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.profession_abilitymod_var)
        self.profession_ranks_var = customtkinter.StringVar()
        self.profession_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.profession_ranks_var, width=35)
        self.profession_miscmod_var = customtkinter.StringVar()
        self.profession_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.profession_miscmod_var)
        self.ride_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Ride (DEX)")
        self.ride_total_var = customtkinter.StringVar()
        self.ride_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.ride_total_var)
        self.ride_abilitymod_var = customtkinter.StringVar()
        self.ride_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.ride_abilitymod_var)
        self.ride_ranks_var = customtkinter.StringVar()
        self.ride_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.ride_ranks_var, width=35)
        self.ride_miscmod_var = customtkinter.StringVar()
        self.ride_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.ride_miscmod_var)
        self.sense_motive_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Sense Motive (WIS)")
        self.sense_motive_total_var = customtkinter.StringVar()
        self.sense_motive_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.sense_motive_total_var)
        self.sense_motive_abilitymod_var = customtkinter.StringVar()
        self.sense_motive_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.sense_motive_abilitymod_var)
        self.sense_motive_ranks_var = customtkinter.StringVar()
        self.sense_motive_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.sense_motive_ranks_var, width=35)
        self.sense_motive_miscmod_var = customtkinter.StringVar()
        self.sense_motive_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.sense_motive_miscmod_var)
        self.sleight_of_hand_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Sleight of Hand (DEX)")
        self.sleight_of_hand_total_var = customtkinter.StringVar()
        self.sleight_of_hand_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.sleight_of_hand_total_var)
        self.sleight_of_hand_abilitymod_var = customtkinter.StringVar()
        self.sleight_of_hand_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.sleight_of_hand_abilitymod_var)
        self.sleight_of_hand_ranks_var = customtkinter.StringVar()
        self.sleight_of_hand_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.sleight_of_hand_ranks_var, width=35)
        self.sleight_of_hand_miscmod_var = customtkinter.StringVar()
        self.sleight_of_hand_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.sleight_of_hand_miscmod_var)
        self.spellcraft_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Spellcraft (INT)")
        self.spellcraft_total_var = customtkinter.StringVar()
        self.spellcraft_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.spellcraft_total_var)
        self.spellcraft_abilitymod_var = customtkinter.StringVar()
        self.spellcraft_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.spellcraft_abilitymod_var)
        self.spellcraft_ranks_var = customtkinter.StringVar()
        self.spellcraft_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.spellcraft_ranks_var, width=35)
        self.spellcraft_miscmod_var = customtkinter.StringVar()
        self.spellcraft_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.spellcraft_miscmod_var)
        self.stealth_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Stealth (DEX)")
        self.stealth_total_var = customtkinter.StringVar()
        self.stealth_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.stealth_total_var)
        self.stealth_abilitymod_var = customtkinter.StringVar()
        self.stealth_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.stealth_abilitymod_var)
        self.stealth_ranks_var = customtkinter.StringVar()
        self.stealth_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.stealth_ranks_var, width=35)
        self.stealth_miscmod_var = customtkinter.StringVar()
        self.stealth_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.stealth_miscmod_var)
        self.survival_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Survival (WIS)")
        self.survival_total_var = customtkinter.StringVar()
        self.survival_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.survival_total_var)
        self.survival_abilitymod_var = customtkinter.StringVar()
        self.survival_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.survival_abilitymod_var)
        self.survival_ranks_var = customtkinter.StringVar()
        self.survival_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.survival_ranks_var, width=35)
        self.survival_miscmod_var = customtkinter.StringVar()
        self.survival_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.survival_miscmod_var)
        self.swim_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Swim (STR)")
        self.swim_total_var = customtkinter.StringVar()
        self.swim_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.swim_total_var)
        self.swim_abilitymod_var = customtkinter.StringVar()
        self.swim_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.swim_abilitymod_var)
        self.swim_ranks_var = customtkinter.StringVar()
        self.swim_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.swim_ranks_var, width=35)
        self.swim_miscmod_var = customtkinter.StringVar()
        self.swim_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.swim_miscmod_var)
        self.use_magic_device_label = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], text="Use Magic Device (CHA)")
        self.use_magic_device_total_var = customtkinter.StringVar()
        self.use_magic_device_total = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.use_magic_device_total_var)
        self.use_magic_device_abilitymod_var = customtkinter.StringVar()
        self.use_magic_device_abilitymod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.use_magic_device_abilitymod_var)
        self.use_magic_device_ranks_var = customtkinter.StringVar()
        self.use_magic_device_ranks = customtkinter.CTkEntry(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.use_magic_device_ranks_var, width=35)
        self.use_magic_device_miscmod_var = customtkinter.StringVar()
        self.use_magic_device_miscmod = customtkinter.CTkLabel(self.skill_frame, text_color=config["COLORS"]["TEXT"], textvariable=self.use_magic_device_miscmod_var)

        # Spell Widgets
        self.spell_known_label = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], text="Spell Known")
        self.spell_save_dc_label = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], text="Spell Save DC")
        self.spells_spells_per_day_label = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], text="Spells per Day")
        self.bonus_spell_label = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], text="Bonus Spell")
        for i in range(10):
            label = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], text=f"Level {i}")
            label.grid(row=i+2, column=0, padx=10, pady=10)
        self.spells_known_0_var = customtkinter.StringVar()
        self.spells_known_0 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_known_0_var)
        self.spell_save_dc_0_var = customtkinter.StringVar()
        self.spell_save_dc_0 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_save_dc_0_var)
        self.spells_per_day_0_var = customtkinter.StringVar()
        self.spells_per_day_0 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_per_day_0_var)
        self.spells_known_1_var = customtkinter.StringVar()
        self.spells_known_1 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_known_1_var)
        self.spell_save_dc_1_var = customtkinter.StringVar()
        self.spell_save_dc_1 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_save_dc_1_var)
        self.spells_per_day_1_var = customtkinter.StringVar()
        self.spells_per_day_1 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_per_day_1_var)
        self.spell_bonus_1_var = customtkinter.StringVar()
        self.spell_bonus_1 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_bonus_1_var)
        self.spells_known_2_var = customtkinter.StringVar()
        self.spells_known_2 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_known_2_var)
        self.spell_save_dc_2_var = customtkinter.StringVar()
        self.spell_save_dc_2 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_save_dc_2_var)
        self.spells_per_day_2_var = customtkinter.StringVar()
        self.spells_per_day_2 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_per_day_2_var)
        self.spell_bonus_2_var = customtkinter.StringVar()
        self.spell_bonus_2 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_bonus_2_var)
        self.spells_known_3_var = customtkinter.StringVar()
        self.spells_known_3 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_known_3_var)
        self.spell_save_dc_3_var = customtkinter.StringVar()
        self.spell_save_dc_3 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_save_dc_3_var)
        self.spells_per_day_3_var = customtkinter.StringVar()
        self.spells_per_day_3 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_per_day_3_var)
        self.spell_bonus_3_var = customtkinter.StringVar()
        self.spell_bonus_3 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_bonus_3_var)
        self.spells_known_4_var = customtkinter.StringVar()
        self.spells_known_4 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_known_4_var)
        self.spell_save_dc_4_var = customtkinter.StringVar()
        self.spell_save_dc_4 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_save_dc_4_var)
        self.spells_per_day_4_var = customtkinter.StringVar()
        self.spells_per_day_4 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_per_day_4_var)
        self.spell_bonus_4_var = customtkinter.StringVar()
        self.spell_bonus_4 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_bonus_4_var)
        self.spells_known_5_var = customtkinter.StringVar()
        self.spells_known_5 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_known_5_var)
        self.spell_save_dc_5_var = customtkinter.StringVar()
        self.spell_save_dc_5 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_save_dc_5_var)
        self.spells_per_day_5_var = customtkinter.StringVar()
        self.spells_per_day_5 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_per_day_5_var)
        self.spell_bonus_5_var = customtkinter.StringVar()
        self.spell_bonus_5 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_bonus_5_var)
        self.spells_known_6_var = customtkinter.StringVar()
        self.spells_known_6 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_known_6_var)
        self.spell_save_dc_6_var = customtkinter.StringVar()
        self.spell_save_dc_6 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_save_dc_6_var)
        self.spells_per_day_6_var = customtkinter.StringVar()
        self.spells_per_day_6 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_per_day_6_var)
        self.spell_bonus_6_var = customtkinter.StringVar()
        self.spell_bonus_6 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_bonus_6_var)
        self.spells_known_7_var = customtkinter.StringVar()
        self.spells_known_7 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_known_7_var)
        self.spell_save_dc_7_var = customtkinter.StringVar()
        self.spell_save_dc_7 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_save_dc_7_var)
        self.spells_per_day_7_var = customtkinter.StringVar()
        self.spells_per_day_7 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_per_day_7_var)
        self.spell_bonus_7_var = customtkinter.StringVar()
        self.spell_bonus_7 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_bonus_7_var)
        self.spells_known_8_var = customtkinter.StringVar()
        self.spells_known_8 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_known_8_var)
        self.spell_save_dc_8_var = customtkinter.StringVar()
        self.spell_save_dc_8 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_save_dc_8_var)
        self.spells_per_day_8_var = customtkinter.StringVar()
        self.spells_per_day_8 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_per_day_8_var)
        self.spell_bonus_8_var = customtkinter.StringVar()
        self.spell_bonus_8 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_bonus_8_var)
        self.spells_known_9_var = customtkinter.StringVar()
        self.spells_known_9 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_known_9_var)
        self.spell_save_dc_9_var = customtkinter.StringVar()
        self.spell_save_dc_9 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_save_dc_9_var)
        self.spells_per_day_9_var = customtkinter.StringVar()
        self.spells_per_day_9 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spells_per_day_9_var)
        self.spell_bonus_9_var = customtkinter.StringVar()
        self.spell_bonus_9 = customtkinter.CTkLabel(self.tabview.tab("Spells"), text_color=config["COLORS"]["TEXT"], textvariable=self.spell_bonus_9_var)

        # Validations
        vcd = (self.tabview.tab("Summary").register(validate), '%P')
        self.character_name.configure(validate="key", validatecommand=vcd)
        self.character_player.configure(validate="key", validatecommand=vcd)
        self.character_homeland.configure(validate="key", validatecommand=vcd)

        vcd_2 = (self.tabview.tab("Combat").register(validate_2), '%P')
        self.str_ability_score.configure(validate="key", validatecommand=vcd_2)
        self.str_ability_increase.configure(validate="key", validatecommand=vcd_2)
        self.dex_ability_score.configure(validate="key", validatecommand=vcd_2)
        self.dex_ability_increase.configure(validate="key", validatecommand=vcd_2)
        self.con_ability_score.configure(validate="key", validatecommand=vcd_2)
        self.con_ability_increase.configure(validate="key", validatecommand=vcd_2)
        self.int_ability_score.configure(validate="key", validatecommand=vcd_2)
        self.int_ability_increase.configure(validate="key", validatecommand=vcd_2)
        self.wis_ability_score.configure(validate="key", validatecommand=vcd_2)
        self.wis_ability_increase.configure(validate="key", validatecommand=vcd_2)
        self.cha_ability_score.configure(validate="key", validatecommand=vcd_2)
        self.cha_ability_increase.configure(validate="key", validatecommand=vcd_2)

        # Event handling
        self.str_ability_score.bind("<FocusOut>", fill_empty_with_zero)
        self.str_ability_increase.bind("<FocusOut>", fill_empty_with_zero)
        self.dex_ability_score.bind("<FocusOut>", fill_empty_with_zero)
        self.dex_ability_increase.bind("<FocusOut>", fill_empty_with_zero)
        self.con_ability_score.bind("<FocusOut>", fill_empty_with_zero)
        self.con_ability_increase.bind("<FocusOut>", fill_empty_with_zero)
        self.int_ability_score.bind("<FocusOut>", fill_empty_with_zero)
        self.int_ability_increase.bind("<FocusOut>", fill_empty_with_zero)
        self.wis_ability_score.bind("<FocusOut>", fill_empty_with_zero)
        self.wis_ability_increase.bind("<FocusOut>", fill_empty_with_zero)
        self.cha_ability_score.bind("<FocusOut>", fill_empty_with_zero)
        self.cha_ability_increase.bind("<FocusOut>", fill_empty_with_zero)

        self.str_ability_score.bind("<KeyRelease>", lambda event: self.calculate_str_mod())
        self.str_ability_increase.bind("<KeyRelease>", lambda event: self.calculate_str_mod())
        self.dex_ability_score.bind("<KeyRelease>", lambda event: self.calculate_dex_mod())
        self.dex_ability_increase.bind("<KeyRelease>", lambda event: self.calculate_dex_mod())
        self.con_ability_score.bind("<KeyRelease>", lambda event: self.calculate_con_mod())
        self.con_ability_increase.bind("<KeyRelease>", lambda event: self.calculate_con_mod())
        self.int_ability_score.bind("<KeyRelease>", lambda event: self.calculate_int_mod())
        self.int_ability_increase.bind("<KeyRelease>", lambda event: self.calculate_int_mod())
        self.wis_ability_score.bind("<KeyRelease>", lambda event: self.calculate_wis_mod())
        self.wis_ability_increase.bind("<KeyRelease>", lambda event: self.calculate_wis_mod())
        self.cha_ability_score.bind("<KeyRelease>", lambda event: self.calculate_cha_mod())
        self.cha_ability_increase.bind("<KeyRelease>", lambda event: self.calculate_cha_mod())

        # Grid all widgets
        self.grid_widgets()

        # Set the controller
        self.controller = None

    def set_controller(self, controller):
        self.controller = controller

    def grid_widgets(self):
        self.tabview.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        self.listbox.grid(row=0, column=1, padx=10, pady=10, sticky="ns")

        self.character_name_label.grid(row=0, column=0, padx=10, pady=10, sticky="e")
        self.character_name.grid(row=0, column=1, padx=10, pady=10, sticky="w")

        self.character_player_label.grid(row=0, column=2, padx=10, pady=10, sticky="e")
        self.character_player.grid(row=0, column=3, padx=10, pady=10, sticky="w")

        self.character_alignment_label.grid(row=1, column=0, padx=10, pady=10, sticky="e")
        self.character_alignment.grid(row=1, column=1, padx=10, pady=10, sticky="w")

        self.character_deity_label.grid(row=1, column=2, padx=10, pady=10, sticky="e")
        self.character_deity.grid(row=1, column=3, padx=10, pady=10, sticky="w")

        self.character_race_label.grid(row=2, column=0, padx=10, pady=10, sticky="e")
        self.character_race.grid(row=2, column=1, padx=10, pady=10, sticky="w")

        self.character_size_label.grid(row=2, column=2, padx=10, pady=10, sticky="e")
        self.character_size.grid(row=2, column=3, padx=10, pady=10, sticky="w")

        self.character_homeland_label.grid(row=3, column=0, padx=10, pady=10, sticky="e")
        self.character_homeland.grid(row=3, column=1, padx=10, pady=10, sticky="w")

        self.character_gender_label.grid(row=3, column=2, padx=10, pady=10, sticky="e")
        self.character_gender.grid(row=3, column=3, padx=10, pady=10, sticky="w")

        self.character_class_label.grid(row=4, column=0, padx=10, pady=10, sticky="e")
        self.character_class.grid(row=4, column=1, padx=10, pady=10, sticky="w")
        self.character_lvl.grid(row=4, column=2, padx=10, pady=10, sticky="ew")

        self.racial_trait_frame.grid(row=6, column=0, columnspan=2, padx=10, pady=10, sticky="nsew")
        self.feats_frame.grid(row=6, column=2, columnspan=2, padx=10, pady=10, sticky="nsew")

        self.character_languages.grid(row=7, column=0, columnspan=4, padx=10, pady=10, sticky="w")

        self.ability_score_label.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")
        self.ability_increase_label.grid(row=0, column=2, padx=10, pady=10, sticky="nsew")
        self.other_modifiers_label.grid(row=0, column=3, padx=10, pady=10, sticky="nsew")
        self.ability_sum_label.grid(row=0, column=4, padx=10, pady=10, sticky="nsew")
        self.ability_modifier_label.grid(row=0, column=5, padx=10, pady=10, sticky="nsew")

        self.str_label.grid(row=1, column=0, padx=10, pady=10)
        self.str_ability_score.grid(row=1, column=1, padx=10, pady=10)
        self.str_ability_increase.grid(row=1, column=2, padx=10, pady=10)
        self.str_other_mod.grid(row=1, column=3, padx=10, pady=10)
        self.str_sum.grid(row=1, column=4, padx=10, pady=10)
        self.str_mod.grid(row=1, column=5, padx=10, pady=10)

        self.dex_label.grid(row=2, column=0, padx=10, pady=10)
        self.dex_ability_score.grid(row=2, column=1, padx=10, pady=10)
        self.dex_ability_increase.grid(row=2, column=2, padx=10, pady=10)
        self.dex_other_mod.grid(row=2, column=3, padx=10, pady=10)
        self.dex_sum.grid(row=2, column=4, padx=10, pady=10)
        self.dex_mod.grid(row=2, column=5, padx=10, pady=10)

        self.con_label.grid(row=3, column=0, padx=10, pady=10)
        self.con_ability_score.grid(row=3, column=1, padx=10, pady=10)
        self.con_ability_increase.grid(row=3, column=2, padx=10, pady=10)
        self.con_other_mod.grid(row=3, column=3, padx=10, pady=10)
        self.con_sum.grid(row=3, column=4, padx=10, pady=10)
        self.con_mod.grid(row=3, column=5, padx=10, pady=10)

        self.int_label.grid(row=4, column=0, padx=10, pady=10)
        self.int_ability_score.grid(row=4, column=1, padx=10, pady=10)
        self.int_ability_increase.grid(row=4, column=2, padx=10, pady=10)
        self.int_other_mod.grid(row=4, column=3, padx=10, pady=10)
        self.int_sum.grid(row=4, column=4, padx=10, pady=10)
        self.int_mod.grid(row=4, column=5, padx=10, pady=10)

        self.wis_label.grid(row=5, column=0, padx=10, pady=10)
        self.wis_ability_score.grid(row=5, column=1, padx=10, pady=10)
        self.wis_ability_increase.grid(row=5, column=2, padx=10, pady=10)
        self.wis_other_mod.grid(row=5, column=3, padx=10, pady=10)
        self.wis_sum.grid(row=5, column=4, padx=10, pady=10)
        self.wis_mod.grid(row=5, column=5, padx=10, pady=10)

        self.cha_label.grid(row=6, column=0, padx=10, pady=10)
        self.cha_ability_score.grid(row=6, column=1, padx=10, pady=10)
        self.cha_ability_increase.grid(row=6, column=2, padx=10, pady=10)
        self.cha_other_mod.grid(row=6, column=3, padx=10, pady=10)
        self.cha_sum.grid(row=6, column=4, padx=10, pady=10)
        self.cha_mod.grid(row=6, column=5, padx=10, pady=10)

        self.character_hp.grid(row=8, column=0, padx=10, pady=10, sticky="nsew")
        self.character_ac_sum.grid(row=8, column=1, padx=10, pady=10, sticky="nsew")
        self.character_touch_ac.grid(row=8, column=2, padx=10, pady=10, sticky="nsew")
        self.character_flatfooted_ac.grid(row=8, column=3, padx=10, pady=10, sticky="nsew")
        self.character_spell_resist.grid(row=8, column=4, padx=10, pady=10, sticky="nsew")
        self.character_initiative.grid(row=9, column=0, padx=10, pady=10, sticky="nsew")
        self.character_bab.grid(row=9, column=1, padx=10, pady=10, sticky="nsew")
        self.character_cmb_sum.grid(row=9, column=2, padx=10, pady=10, sticky="nsew")
        self.character_cmd_sum.grid(row=9, column=3, padx=10, pady=10, sticky="nsew")
        self.character_speed.grid(row=9, column=4, padx=10, pady=10, sticky="nsew")
        self.character_fort_save_sum.grid(row=10, column=0, padx=10, pady=10, sticky="nsew")
        self.character_ref_save_sum.grid(row=10, column=1, padx=10, pady=10, sticky="nsew")
        self.character_will_save_sum.grid(row=10, column=2, padx=10, pady=10, sticky="nsew")

        self.skill_frame.grid(row=0, column=0, sticky="nsew")
        self.skill_name_label.grid(row=0, column=0, padx=10, pady=10, sticky="ew")
        self.total_bonus_label.grid(row=0, column=1, padx=10, pady=10, sticky="ew")
        self.ability_mod_label.grid(row=0, column=2, padx=10, pady=10, sticky="ew")
        self.ranks_label.grid(row=0, column=3, padx=10, pady=10, sticky="ew")
        self.misc_mod_label.grid(row=0, column=4, padx=10, pady=10, sticky="ew")
        self.acrobatics_label.grid(row=2, column=0, padx=10, pady=10, sticky="ew")
        self.acrobatics_total.grid(row=2, column=1, padx=10, pady=10, sticky="ew")
        self.acrobatics_abilitymod.grid(row=2, column=2, padx=10, pady=10, sticky="ew")
        self.acrobatics_ranks.grid(row=2, column=3, padx=10, pady=10)
        self.acrobatics_miscmod.grid(row=2, column=4, padx=10, pady=10, sticky="ew")
        self.appraise_label.grid(row=3, column=0, padx=10, pady=10, sticky="ew")
        self.appraise_total.grid(row=3, column=1, padx=10, pady=10, sticky="ew")
        self.appraise_abilitymod.grid(row=3, column=2, padx=10, pady=10, sticky="ew")
        self.appraise_ranks.grid(row=3, column=3, padx=10, pady=10)
        self.appraise_miscmod.grid(row=3, column=4, padx=10, pady=10, sticky="ew")
        self.bluff_label.grid(row=4, column=0, padx=10, pady=10, sticky="ew")
        self.bluff_total.grid(row=4, column=1, padx=10, pady=10, sticky="ew")
        self.bluff_abilitymod.grid(row=4, column=2, padx=10, pady=10, sticky="ew")
        self.bluff_ranks.grid(row=4, column=3, padx=10, pady=10)
        self.bluff_miscmod.grid(row=4, column=4, padx=10, pady=10, sticky="ew")
        self.climb_label.grid(row=5, column=0, padx=10, pady=10, sticky="ew")
        self.climb_total.grid(row=5, column=1, padx=10, pady=10, sticky="ew")
        self.climb_abilitymod.grid(row=5, column=2, padx=10, pady=10, sticky="ew")
        self.climb_ranks.grid(row=5, column=3, padx=10, pady=10)
        self.climb_miscmod.grid(row=5, column=4, padx=10, pady=10, sticky="ew")
        self.craft_label.grid(row=6, column=0, padx=10, pady=10, sticky="ew")
        self.craft_total.grid(row=6, column=1, padx=10, pady=10, sticky="ew")
        self.craft_abilitymod.grid(row=6, column=2, padx=10, pady=10, sticky="ew")
        self.craft_ranks.grid(row=6, column=3, padx=10, pady=10)
        self.craft_miscmod.grid(row=6, column=4, padx=10, pady=10, sticky="ew")
        self.diplomacy_label.grid(row=7, column=0, padx=10, pady=10, sticky="ew")
        self.diplomacy_total.grid(row=7, column=1, padx=10, pady=10, sticky="ew")
        self.diplomacy_abilitymod.grid(row=7, column=2, padx=10, pady=10, sticky="ew")
        self.diplomacy_ranks.grid(row=7, column=3, padx=10, pady=10)
        self.diplomacy_miscmod.grid(row=7, column=4, padx=10, pady=10, sticky="ew")
        self.disable_device_label.grid(row=8, column=0, padx=10, pady=10, sticky="ew")
        self.disable_device_total.grid(row=8, column=1, padx=10, pady=10, sticky="ew")
        self.disable_device_abilitymod.grid(row=8, column=2, padx=10, pady=10, sticky="ew")
        self.disable_device_ranks.grid(row=8, column=3, padx=10, pady=10)
        self.disable_device_miscmod.grid(row=8, column=4, padx=10, pady=10, sticky="ew")
        self.disguise_label.grid(row=9, column=0, padx=10, pady=10, sticky="ew")
        self.disguise_total.grid(row=9, column=1, padx=10, pady=10, sticky="ew")
        self.disguise_abilitymod.grid(row=9, column=2, padx=10, pady=10, sticky="ew")
        self.disguise_ranks.grid(row=9, column=3, padx=10, pady=10)
        self.disguise_miscmod.grid(row=9, column=4, padx=10, pady=10, sticky="ew")
        self.escape_artist_label.grid(row=10, column=0, padx=10, pady=10, sticky="ew")
        self.escape_artist_total.grid(row=10, column=1, padx=10, pady=10, sticky="ew")
        self.escape_artist_abilitymod.grid(row=10, column=2, padx=10, pady=10, sticky="ew")
        self.escape_artist_ranks.grid(row=10, column=3, padx=10, pady=10)
        self.escape_artist_miscmod.grid(row=10, column=4, padx=10, pady=10, sticky="ew")
        self.fly_label.grid(row=11, column=0, padx=10, pady=10, sticky="ew")
        self.fly_total.grid(row=11, column=1, padx=10, pady=10, sticky="ew")
        self.fly_abilitymod.grid(row=11, column=2, padx=10, pady=10, sticky="ew")
        self.fly_ranks.grid(row=11, column=3, padx=10, pady=10)
        self.fly_miscmod.grid(row=11, column=4, padx=10, pady=10, sticky="ew")
        self.handle_animal_label.grid(row=12, column=0, padx=10, pady=10, sticky="ew")
        self.handle_animal_total.grid(row=12, column=1, padx=10, pady=10, sticky="ew")
        self.handle_animal_abilitymod.grid(row=12, column=2, padx=10, pady=10, sticky="ew")
        self.handle_animal_ranks.grid(row=12, column=3, padx=10, pady=10)
        self.handle_animal_miscmod.grid(row=12, column=4, padx=10, pady=10, sticky="ew")
        self.heal_label.grid(row=13, column=0, padx=10, pady=10, sticky="ew")
        self.heal_total.grid(row=13, column=1, padx=10, pady=10, sticky="ew")
        self.heal_abilitymod.grid(row=13, column=2, padx=10, pady=10, sticky="ew")
        self.heal_ranks.grid(row=13, column=3, padx=10, pady=10)
        self.heal_miscmod.grid(row=13, column=4, padx=10, pady=10, sticky="ew")
        self.intimidate_label.grid(row=14, column=0, padx=10, pady=10, sticky="ew")
        self.intimidate_total.grid(row=14, column=1, padx=10, pady=10, sticky="ew")
        self.intimidate_abilitymod.grid(row=14, column=2, padx=10, pady=10, sticky="ew")
        self.intimidate_ranks.grid(row=14, column=3, padx=10, pady=10)
        self.intimidate_miscmod.grid(row=14, column=4, padx=10, pady=10, sticky="ew")
        self.knowledge_arcana_label.grid(row=15, column=0, padx=10, pady=10, sticky="ew")
        self.knowledge_arcana_total.grid(row=15, column=1, padx=10, pady=10, sticky="ew")
        self.knowledge_arcana_abilitymod.grid(row=15, column=2, padx=10, pady=10, sticky="ew")
        self.knowledge_arcana_ranks.grid(row=15, column=3, padx=10, pady=10)
        self.knowledge_arcana_miscmod.grid(row=15, column=4, padx=10, pady=10, sticky="ew")
        self.knowledge_dungeoneering_label.grid(row=16, column=0, padx=10, pady=10, sticky="ew")
        self.knowledge_dungeoneering_total.grid(row=16, column=1, padx=10, pady=10, sticky="ew")
        self.knowledge_dungeoneering_abilitymod.grid(row=16, column=2, padx=10, pady=10, sticky="ew")
        self.knowledge_dungeoneering_ranks.grid(row=16, column=3, padx=10, pady=10)
        self.knowledge_dungeoneering_miscmod.grid(row=16, column=4, padx=10, pady=10, sticky="ew")
        self.knowledge_engineering_label.grid(row=17, column=0, padx=10, pady=10, sticky="ew")
        self.knowledge_engineering_total.grid(row=17, column=1, padx=10, pady=10, sticky="ew")
        self.knowledge_engineering_abilitymod.grid(row=17, column=2, padx=10, pady=10, sticky="ew")
        self.knowledge_engineering_ranks.grid(row=17, column=3, padx=10, pady=10)
        self.knowledge_engineering_miscmod.grid(row=17, column=4, padx=10, pady=10, sticky="ew")
        self.knowledge_geography_label.grid(row=18, column=0, padx=10, pady=10, sticky="ew")
        self.knowledge_geography_total.grid(row=18, column=1, padx=10, pady=10, sticky="ew")
        self.knowledge_geography_abilitymod.grid(row=18, column=2, padx=10, pady=10, sticky="ew")
        self.knowledge_geography_ranks.grid(row=18, column=3, padx=10, pady=10)
        self.knowledge_geography_miscmod.grid(row=18, column=4, padx=10, pady=10, sticky="ew")
        self.knowledge_history_label.grid(row=19, column=0, padx=10, pady=10, sticky="ew")
        self.knowledge_history_total.grid(row=19, column=1, padx=10, pady=10, sticky="ew")
        self.knowledge_history_abilitymod.grid(row=19, column=2, padx=10, pady=10, sticky="ew")
        self.knowledge_history_ranks.grid(row=19, column=3, padx=10, pady=10)
        self.knowledge_history_miscmod.grid(row=19, column=4, padx=10, pady=10, sticky="ew")
        self.knowledge_local_label.grid(row=20, column=0, padx=10, pady=10, sticky="ew")
        self.knowledge_local_total.grid(row=20, column=1, padx=10, pady=10, sticky="ew")
        self.knowledge_local_abilitymod.grid(row=20, column=2, padx=10, pady=10, sticky="ew")
        self.knowledge_local_ranks.grid(row=20, column=3, padx=10, pady=10)
        self.knowledge_local_miscmod.grid(row=20, column=4, padx=10, pady=10, sticky="ew")
        self.knowledge_nature_label.grid(row=21, column=0, padx=10, pady=10, sticky="ew")
        self.knowledge_nature_total.grid(row=21, column=1, padx=10, pady=10, sticky="ew")
        self.knowledge_nature_abilitymod.grid(row=21, column=2, padx=10, pady=10, sticky="ew")
        self.knowledge_nature_ranks.grid(row=21, column=3, padx=10, pady=10)
        self.knowledge_nature_miscmod.grid(row=21, column=4, padx=10, pady=10, sticky="ew")
        self.knowledge_nobility_label.grid(row=22, column=0, padx=10, pady=10, sticky="ew")
        self.knowledge_nobility_total.grid(row=22, column=1, padx=10, pady=10, sticky="ew")
        self.knowledge_nobility_abilitymod.grid(row=22, column=2, padx=10, pady=10, sticky="ew")
        self.knowledge_nobility_ranks.grid(row=22, column=3, padx=10, pady=10)
        self.knowledge_nobility_miscmod.grid(row=22, column=4, padx=10, pady=10, sticky="ew")
        self.knowledge_planes_label.grid(row=23, column=0, padx=10, pady=10, sticky="ew")
        self.knowledge_planes_total.grid(row=23, column=1, padx=10, pady=10, sticky="ew")
        self.knowledge_planes_abilitymod.grid(row=23, column=2, padx=10, pady=10, sticky="ew")
        self.knowledge_planes_ranks.grid(row=23, column=3, padx=10, pady=10)
        self.knowledge_planes_miscmod.grid(row=23, column=4, padx=10, pady=10, sticky="ew")
        self.knowledge_religion_label.grid(row=24, column=0, padx=10, pady=10, sticky="ew")
        self.knowledge_religion_total.grid(row=24, column=1, padx=10, pady=10, sticky="ew")
        self.knowledge_religion_abilitymod.grid(row=24, column=2, padx=10, pady=10, sticky="ew")
        self.knowledge_religion_ranks.grid(row=24, column=3, padx=10, pady=10)
        self.knowledge_religion_miscmod.grid(row=24, column=4, padx=10, pady=10, sticky="ew")
        self.linguistics_label.grid(row=25, column=0, padx=10, pady=10, sticky="ew")
        self.linguistics_total.grid(row=25, column=1, padx=10, pady=10, sticky="ew")
        self.linguistics_abilitymod.grid(row=25, column=2, padx=10, pady=10, sticky="ew")
        self.linguistics_ranks.grid(row=25, column=3, padx=10, pady=10)
        self.linguistics_miscmod.grid(row=25, column=4, padx=10, pady=10, sticky="ew")
        self.perception_label.grid(row=26, column=0, padx=10, pady=10, sticky="ew")
        self.perception_total.grid(row=26, column=1, padx=10, pady=10, sticky="ew")
        self.perception_abilitymod.grid(row=26, column=2, padx=10, pady=10, sticky="ew")
        self.perception_ranks.grid(row=26, column=3, padx=10, pady=10)
        self.perception_miscmod.grid(row=26, column=4, padx=10, pady=10, sticky="ew")
        self.perform_label.grid(row=27, column=0, padx=10, pady=10, sticky="ew")
        self.perform_total.grid(row=27, column=1, padx=10, pady=10, sticky="ew")
        self.perform_abilitymod.grid(row=27, column=2, padx=10, pady=10, sticky="ew")
        self.perform_ranks.grid(row=27, column=3, padx=10, pady=10)
        self.perform_miscmod.grid(row=27, column=4, padx=10, pady=10, sticky="ew")
        self.profession_label.grid(row=28, column=0, padx=10, pady=10, sticky="ew")
        self.profession_total.grid(row=28, column=1, padx=10, pady=10, sticky="ew")
        self.profession_abilitymod.grid(row=28, column=2, padx=10, pady=10, sticky="ew")
        self.profession_ranks.grid(row=28, column=3, padx=10, pady=10)
        self.profession_miscmod.grid(row=28, column=4, padx=10, pady=10, sticky="ew")
        self.ride_label.grid(row=29, column=0, padx=10, pady=10, sticky="ew")
        self.ride_total.grid(row=29, column=1, padx=10, pady=10, sticky="ew")
        self.ride_abilitymod.grid(row=29, column=2, padx=10, pady=10, sticky="ew")
        self.ride_ranks.grid(row=29, column=3, padx=10, pady=10)
        self.ride_miscmod.grid(row=29, column=4, padx=10, pady=10, sticky="ew")
        self.sense_motive_label.grid(row=30, column=0, padx=10, pady=10, sticky="ew")
        self.sense_motive_total.grid(row=30, column=1, padx=10, pady=10, sticky="ew")
        self.sense_motive_abilitymod.grid(row=30, column=2, padx=10, pady=10, sticky="ew")
        self.sense_motive_ranks.grid(row=30, column=3, padx=10, pady=10)
        self.sense_motive_miscmod.grid(row=30, column=4, padx=10, pady=10, sticky="ew")
        self.sleight_of_hand_label.grid(row=31, column=0, padx=10, pady=10, sticky="ew")
        self.sleight_of_hand_total.grid(row=31, column=1, padx=10, pady=10, sticky="ew")
        self.sleight_of_hand_abilitymod.grid(row=31, column=2, padx=10, pady=10, sticky="ew")
        self.sleight_of_hand_ranks.grid(row=31, column=3, padx=10, pady=10)
        self.sleight_of_hand_miscmod.grid(row=31, column=4, padx=10, pady=10, sticky="ew")
        self.spellcraft_label.grid(row=32, column=0, padx=10, pady=10, sticky="ew")
        self.spellcraft_total.grid(row=32, column=1, padx=10, pady=10, sticky="ew")
        self.spellcraft_abilitymod.grid(row=32, column=2, padx=10, pady=10, sticky="ew")
        self.spellcraft_ranks.grid(row=32, column=3, padx=10, pady=10)
        self.spellcraft_miscmod.grid(row=32, column=4, padx=10, pady=10, sticky="ew")
        self.stealth_label.grid(row=33, column=0, padx=10, pady=10, sticky="ew")
        self.stealth_total.grid(row=33, column=1, padx=10, pady=10, sticky="ew")
        self.stealth_abilitymod.grid(row=33, column=2, padx=10, pady=10, sticky="ew")
        self.stealth_ranks.grid(row=33, column=3, padx=10, pady=10)
        self.stealth_miscmod.grid(row=33, column=4, padx=10, pady=10, sticky="ew")
        self.survival_label.grid(row=34, column=0, padx=10, pady=10, sticky="ew")
        self.survival_total.grid(row=34, column=1, padx=10, pady=10, sticky="ew")
        self.survival_abilitymod.grid(row=34, column=2, padx=10, pady=10, sticky="ew")
        self.survival_ranks.grid(row=34, column=3, padx=10, pady=10)
        self.survival_miscmod.grid(row=34, column=4, padx=10, pady=10, sticky="ew")
        self.swim_label.grid(row=35, column=0, padx=10, pady=10, sticky="ew")
        self.swim_total.grid(row=35, column=1, padx=10, pady=10, sticky="ew")
        self.swim_abilitymod.grid(row=35, column=2, padx=10, pady=10, sticky="ew")
        self.swim_ranks.grid(row=35, column=3, padx=10, pady=10)
        self.swim_miscmod.grid(row=35, column=4, padx=10, pady=10, sticky="ew")
        self.use_magic_device_label.grid(row=36, column=0, padx=10, pady=10, sticky="ew")
        self.use_magic_device_total.grid(row=36, column=1, padx=10, pady=10, sticky="ew")
        self.use_magic_device_abilitymod.grid(row=36, column=2, padx=10, pady=10, sticky="ew")
        self.use_magic_device_ranks.grid(row=36, column=3, padx=10, pady=10)
        self.use_magic_device_miscmod.grid(row=36, column=4, padx=10, pady=10, sticky="ew")

        self.spell_known_label.grid(row=0, column=1, padx=10, pady=10, sticky="ew")
        self.spell_save_dc_label.grid(row=0, column=2, padx=10, pady=10, sticky="ew")
        self.spells_spells_per_day_label.grid(row=0, column=3, padx=10, pady=10, sticky="ew")
        self.bonus_spell_label.grid(row=0, column=4, padx=10, pady=10, sticky="ew")
        self.spells_known_0.grid(row=2, column=1, padx=10, pady=10)
        self.spell_save_dc_0.grid(row=2, column=2, padx=10, pady=10)
        self.spells_per_day_0.grid(row=2, column=3, padx=10, pady=10)
        self.spells_known_1.grid(row=3, column=1, padx=10, pady=10)
        self.spell_save_dc_1.grid(row=3, column=2, padx=10, pady=10)
        self.spells_per_day_1.grid(row=3, column=3, padx=10, pady=10)
        self.spell_bonus_1.grid(row=3, column=4, padx=10, pady=10)
        self.spells_known_2.grid(row=4, column=1, padx=10, pady=10)
        self.spell_save_dc_2.grid(row=4, column=2, padx=10, pady=10)
        self.spells_per_day_2.grid(row=4, column=3, padx=10, pady=10)
        self.spell_bonus_2.grid(row=4, column=4, padx=10, pady=10)
        self.spells_known_3.grid(row=5, column=1, padx=10, pady=10)
        self.spell_save_dc_3.grid(row=5, column=2, padx=10, pady=10)
        self.spells_per_day_3.grid(row=5, column=3, padx=10, pady=10)
        self.spell_bonus_3.grid(row=5, column=4, padx=10, pady=10)
        self.spells_known_4.grid(row=6, column=1, padx=10, pady=10)
        self.spell_save_dc_4.grid(row=6, column=2, padx=10, pady=10)
        self.spells_per_day_4.grid(row=6, column=3, padx=10, pady=10)
        self.spell_bonus_4.grid(row=6, column=4, padx=10, pady=10)
        self.spells_known_5.grid(row=7, column=1, padx=10, pady=10)
        self.spell_save_dc_5.grid(row=7, column=2, padx=10, pady=10)
        self.spells_per_day_5.grid(row=7, column=3, padx=10, pady=10)
        self.spell_bonus_5.grid(row=7, column=4, padx=10, pady=10)
        self.spells_known_6.grid(row=8, column=1, padx=10, pady=10)
        self.spell_save_dc_6.grid(row=8, column=2, padx=10, pady=10)
        self.spells_per_day_6.grid(row=8, column=3, padx=10, pady=10)
        self.spell_bonus_6.grid(row=8, column=4, padx=10, pady=10)
        self.spells_known_7.grid(row=9, column=1, padx=10, pady=10)
        self.spell_save_dc_7.grid(row=9, column=2, padx=10, pady=10)
        self.spells_per_day_7.grid(row=9, column=3, padx=10, pady=10)
        self.spell_bonus_7.grid(row=9, column=4, padx=10, pady=10)
        self.spells_known_8.grid(row=10, column=1, padx=10, pady=10)
        self.spell_save_dc_8.grid(row=10, column=2, padx=10, pady=10)
        self.spells_per_day_8.grid(row=10, column=3, padx=10, pady=10)
        self.spell_bonus_8.grid(row=10, column=4, padx=10, pady=10)
        self.spells_known_9.grid(row=11, column=1, padx=10, pady=10)
        self.spell_save_dc_9.grid(row=11, column=2, padx=10, pady=10)
        self.spells_per_day_9.grid(row=11, column=3, padx=10, pady=10)
        self.spell_bonus_9.grid(row=11, column=4, padx=10, pady=10)

    def push_data(self, model):
        pass

    def pull_data(self, model):
        self.character_alignment.configure(values=model.character_alignment_list)
        self.character_deity.configure(values=model.character_deity_list)
        self.character_alignment_var.set(value=model.character_alignment_list[0])
        self.character_deity_var.set(value=model.character_deity_list[0])
        self.character_race.configure(values=model.character_race_list)
        self.character_race_var.set(value=model.character_race_list[0])
        self.character_gender.configure(values=model.character_gender_list)
        self.character_gender_var.set(value=model.character_gender_list[0])
        self.character_lvl.configure(values=model.character_lvl_list)
        self.character_lvl_var.set(value=model.character_lvl_list[0])
        self.character_class.configure(values=model.character_class_list)
        self.character_class_var.set(value=model.character_class_list[0])
        languages_str = ", ".join(model.character_languages_list)
        self.character_languages.configure(text=f"Languages: {languages_str}")

        self.character_hp_var.set(value=model.character_hp)
        self.character_initiative_var.set(value=f"INIT: {model.character_initiative_total}")
        self.character_ac_sum_var.set(value=f"AC: {model.character_ac_sum}")
        self.character_touch_ac_var.set(value=f"TOUCH: {model.character_touch_ac}")
        self.character_flatfooted_ac_var.set(value=f"FLAT-FOOTED: {model.character_flat_ac}")
        self.character_fort_save_sum_var.set(value=f"FORTITUDE: {model.character_fort_save_sum}")
        self.character_ref_save_sum_var.set(value=f"REFLEX: {model.character_ref_save_sum}")
        self.character_will_save_sum_var.set(value=f"WILL: {model.character_will_save_sum}")
        self.character_bab_var.set(value=f"BaB: {model.character_bab}")
        self.character_spell_resist_var.set(value=f"SPELL RESIST: {model.character_spell_resist}")
        self.character_cmb_sum_var.set(value=f"CMB: {model.character_cmb_sum}")
        self.character_cmd_sum_var.set(value=f"CMD: {model.character_cmd_sum}")
        self.character_speed_var.set(value=f"SPEED: {model.character_speed} ft.")

        self.str_ability_score_var.set(value=model.str_score)
        self.str_ability_increase_var.set(value=model.str_increase)
        self.str_other_mod_var.set(value=model.str_other_bonuses)
        self.str_sum_var.set(value=model.str_sum)
        self.str_mod_var.set(value=model.str_mod)

        self.dex_ability_score_var.set(value=model.dex_score)
        self.dex_ability_increase_var.set(value=model.dex_increase)
        self.dex_other_mod_var.set(value=model.dex_other_bonuses)
        self.dex_sum_var.set(value=model.dex_sum)
        self.dex_mod_var.set(value=model.dex_mod)

        self.con_ability_score_var.set(value=model.con_score)
        self.con_ability_increase_var.set(value=model.con_increase)
        self.con_other_mod_var.set(value=model.con_other_bonuses)
        self.con_sum_var.set(value=model.con_sum)
        self.con_mod_var.set(value=model.con_mod)

        self.int_ability_score_var.set(value=model.int_score)
        self.int_ability_increase_var.set(value=model.int_increase)
        self.int_other_mod_var.set(value=model.int_other_bonuses)
        self.int_sum_var.set(value=model.int_sum)
        self.int_mod_var.set(value=model.int_mod)

        self.wis_ability_score_var.set(value=model.wis_score)
        self.wis_ability_increase_var.set(value=model.wis_increase)
        self.wis_other_mod_var.set(value=model.wis_other_bonuses)
        self.wis_sum_var.set(value=model.wis_sum)
        self.wis_mod_var.set(value=model.wis_mod)

        self.cha_ability_score_var.set(value=model.cha_score)
        self.cha_ability_increase_var.set(value=model.cha_increase)
        self.cha_other_mod_var.set(value=model.cha_other_bonuses)
        self.cha_sum_var.set(value=model.cha_sum)
        self.cha_mod_var.set(value=model.cha_mod)

        self.acrobatics_total_var.set(value=model.acrobatics_sum)
        self.acrobatics_abilitymod_var.set(value=model.dex_mod)
        self.acrobatics_ranks_var.set(value=model.acrobatics_rank)
        self.acrobatics_miscmod_var.set(value=model.acrobatics_misc_mod)
        self.appraise_total_var.set(value=model.appraise_sum)
        self.appraise_abilitymod_var.set(value=model.int_mod)
        self.appraise_ranks_var.set(value=model.appraise_rank)
        self.appraise_miscmod_var.set(value=model.appraise_misc_mod)
        self.bluff_total_var.set(value=model.bluff_sum)
        self.bluff_abilitymod_var.set(value=model.cha_mod)
        self.bluff_ranks_var.set(value=model.bluff_rank)
        self.bluff_miscmod_var.set(value=model.bluff_misc_mod)
        self.climb_total_var.set(value=model.climb_sum)
        self.climb_abilitymod_var.set(value=model.str_mod)
        self.climb_ranks_var.set(value=model.climb_rank)
        self.climb_miscmod_var.set(value=model.climb_misc_mod)
        self.craft_total_var.set(value=model.craft_sum)
        self.craft_abilitymod_var.set(value=model.int_mod)
        self.craft_ranks_var.set(value=model.craft_rank)
        self.craft_miscmod_var.set(value=model.craft_misc_mod)
        self.diplomacy_total_var.set(value=model.diplomacy_sum)
        self.diplomacy_abilitymod_var.set(value=model.cha_mod)
        self.diplomacy_ranks_var.set(value=model.diplomacy_rank)
        self.diplomacy_miscmod_var.set(value=model.diplomacy_misc_mod)
        self.disable_device_total_var.set(value=model.disable_device_sum)
        self.disable_device_abilitymod_var.set(value=model.dex_mod)
        self.disable_device_ranks_var.set(value=model.disable_device_rank)
        self.disable_device_miscmod_var.set(value=model.disable_device_misc_mod)
        self.disguise_total_var.set(value=model.disguise_sum)
        self.disguise_abilitymod_var.set(value=model.cha_mod)
        self.disguise_ranks_var.set(value=model.disguise_rank)
        self.disguise_miscmod_var.set(value=model.disguise_misc_mod)
        self.escape_artist_total_var.set(value=model.escape_artist_sum)
        self.escape_artist_abilitymod_var.set(value=model.dex_mod)
        self.escape_artist_ranks_var.set(value=model.escape_artist_rank)
        self.escape_artist_miscmod_var.set(value=model.escape_artist_misc_mod)
        self.fly_total_var.set(value=model.fly_sum)
        self.fly_abilitymod_var.set(value=model.dex_mod)
        self.fly_ranks_var.set(value=model.fly_rank)
        self.fly_miscmod_var.set(value=model.fly_misc_mod)
        self.handle_animal_total_var.set(value=model.handle_animal_sum)
        self.handle_animal_abilitymod_var.set(value=model.cha_mod)
        self.handle_animal_ranks_var.set(value=model.handle_animal_rank)
        self.handle_animal_miscmod_var.set(value=model.handle_animal_misc_mod)
        self.heal_total_var.set(value=model.heal_sum)
        self.heal_abilitymod_var.set(value=model.wis_mod)
        self.heal_ranks_var.set(value=model.heal_rank)
        self.heal_miscmod_var.set(value=model.heal_misc_mod)
        self.intimidate_total_var.set(value=model.intimidate_sum)
        self.intimidate_abilitymod_var.set(value=model.cha_mod)
        self.intimidate_ranks_var.set(value=model.intimidate_rank)
        self.intimidate_miscmod_var.set(value=model.intimidate_misc_mod)
        self.knowledge_arcana_total_var.set(value=model.knowledge_arcana_sum)
        self.knowledge_arcana_abilitymod_var.set(value=model.int_mod)
        self.knowledge_arcana_ranks_var.set(value=model.knowledge_arcana_rank)
        self.knowledge_arcana_miscmod_var.set(value=model.knowledge_arcana_misc_mod)
        self.knowledge_dungeoneering_total_var.set(value=model.knowledge_dungeoneering_sum)
        self.knowledge_dungeoneering_abilitymod_var.set(value=model.int_mod)
        self.knowledge_dungeoneering_ranks_var.set(value=model.knowledge_dungeoneering_rank)
        self.knowledge_dungeoneering_miscmod_var.set(value=model.knowledge_dungeoneering_misc_mod)
        self.knowledge_engineering_total_var.set(value=model.knowledge_engineering_sum)
        self.knowledge_engineering_abilitymod_var.set(value=model.int_mod)
        self.knowledge_engineering_ranks_var.set(value=model.knowledge_engineering_rank)
        self.knowledge_engineering_miscmod_var.set(value=model.knowledge_engineering_misc_mod)
        self.knowledge_geography_total_var.set(value=model.knowledge_geography_sum)
        self.knowledge_geography_abilitymod_var.set(value=model.int_mod)
        self.knowledge_geography_ranks_var.set(value=model.knowledge_geography_rank)
        self.knowledge_geography_miscmod_var.set(value=model.knowledge_geography_misc_mod)
        self.knowledge_history_total_var.set(value=model.knowledge_history_sum)
        self.knowledge_history_abilitymod_var.set(value=model.int_mod)
        self.knowledge_history_ranks_var.set(value=model.knowledge_history_rank)
        self.knowledge_history_miscmod_var.set(value=model.knowledge_history_misc_mod)
        self.knowledge_local_total_var.set(value=model.knowledge_local_sum)
        self.knowledge_local_abilitymod_var.set(value=model.int_mod)
        self.knowledge_local_ranks_var.set(value=model.knowledge_local_rank)
        self.knowledge_local_miscmod_var.set(value=model.knowledge_local_misc_mod)
        self.knowledge_nature_total_var.set(value=model.knowledge_nature_sum)
        self.knowledge_nature_abilitymod_var.set(value=model.int_mod)
        self.knowledge_nature_ranks_var.set(value=model.knowledge_nature_rank)
        self.knowledge_nature_miscmod_var.set(value=model.knowledge_nature_misc_mod)
        self.knowledge_nobility_total_var.set(value=model.knowledge_nobility_sum)
        self.knowledge_nobility_abilitymod_var.set(value=model.int_mod)
        self.knowledge_nobility_ranks_var.set(value=model.knowledge_nobility_rank)
        self.knowledge_nobility_miscmod_var.set(value=model.knowledge_nobility_misc_mod)
        self.knowledge_planes_total_var.set(value=model.knowledge_planes_sum)
        self.knowledge_planes_abilitymod_var.set(value=model.int_mod)
        self.knowledge_planes_ranks_var.set(value=model.knowledge_planes_rank)
        self.knowledge_planes_miscmod_var.set(value=model.knowledge_planes_misc_mod)
        self.knowledge_religion_total_var.set(value=model.knowledge_religion_sum)
        self.knowledge_religion_abilitymod_var.set(value=model.int_mod)
        self.knowledge_religion_ranks_var.set(value=model.knowledge_religion_rank)
        self.knowledge_religion_miscmod_var.set(value=model.knowledge_religion_misc_mod)
        self.linguistics_total_var.set(value=model.linguistics_sum)
        self.linguistics_abilitymod_var.set(value=model.int_mod)
        self.linguistics_ranks_var.set(value=model.linguistics_rank)
        self.linguistics_miscmod_var.set(value=model.linguistics_misc_mod)
        self.perception_total_var.set(value=model.perception_sum)
        self.perception_abilitymod_var.set(value=model.wis_mod)
        self.perception_ranks_var.set(value=model.perception_rank)
        self.perception_miscmod_var.set(value=model.perception_misc_mod)
        self.perform_total_var.set(value=model.perform_sum)
        self.perform_abilitymod_var.set(value=model.cha_mod)
        self.perform_ranks_var.set(value=model.perform_rank)
        self.perform_miscmod_var.set(value=model.perform_misc_mod)
        self.profession_total_var.set(value=model.profession_sum)
        self.profession_abilitymod_var.set(value=model.wis_mod)
        self.profession_ranks_var.set(value=model.profession_rank)
        self.profession_miscmod_var.set(value=model.profession_misc_mod)
        self.ride_total_var.set(value=model.ride_sum)
        self.ride_abilitymod_var.set(value=model.dex_mod)
        self.ride_ranks_var.set(value=model.ride_rank)
        self.ride_miscmod_var.set(value=model.ride_misc_mod)
        self.sense_motive_total_var.set(value=model.sense_motive_sum)
        self.sense_motive_abilitymod_var.set(value=model.wis_mod)
        self.sense_motive_ranks_var.set(value=model.sense_motive_rank)
        self.sense_motive_miscmod_var.set(value=model.sense_motive_misc_mod)
        self.sleight_of_hand_total_var.set(value=model.sleight_of_hand_sum)
        self.sleight_of_hand_abilitymod_var.set(value=model.dex_mod)
        self.sleight_of_hand_ranks_var.set(value=model.sleight_of_hand_rank)
        self.sleight_of_hand_miscmod_var.set(value=model.sleight_of_hand_misc_mod)
        self.spellcraft_total_var.set(value=model.spellcraft_sum)
        self.spellcraft_abilitymod_var.set(value=model.int_mod)
        self.spellcraft_ranks_var.set(value=model.spellcraft_rank)
        self.spellcraft_miscmod_var.set(value=model.spellcraft_misc_mod)
        self.stealth_total_var.set(value=model.stealth_sum)
        self.stealth_abilitymod_var.set(value=model.dex_mod)
        self.stealth_ranks_var.set(value=model.stealth_rank)
        self.stealth_miscmod_var.set(value=model.stealth_misc_mod)
        self.survival_total_var.set(value=model.survival_sum)
        self.survival_abilitymod_var.set(value=model.wis_mod)
        self.survival_ranks_var.set(value=model.survival_rank)
        self.survival_miscmod_var.set(value=model.survival_misc_mod)
        self.swim_total_var.set(value=model.swim_sum)
        self.swim_abilitymod_var.set(value=model.str_mod)
        self.swim_ranks_var.set(value=model.swim_rank)
        self.swim_miscmod_var.set(value=model.swim_misc_mod)
        self.use_magic_device_total_var.set(value=model.use_magic_device_sum)
        self.use_magic_device_abilitymod_var.set(value=model.cha_mod)
        self.use_magic_device_ranks_var.set(value=model.use_magic_device_rank)
        self.use_magic_device_miscmod_var.set(value=model.use_magic_device_misc_mod)
        self.spells_known_0_var.set(value=model.spells_known_0)
        self.spell_save_dc_0_var.set(value=model.spell_save_dc_0)
        self.spells_per_day_0_var.set(value=model.spells_per_day_0)
        self.spells_known_1_var.set(value=model.spells_known_1)
        self.spell_save_dc_1_var.set(value=model.spell_save_dc_1)
        self.spells_per_day_1_var.set(value=model.spells_per_day_1)
        self.spell_bonus_1_var.set(value=model.spell_bonus_1)
        self.spells_known_2_var.set(value=model.spells_known_2)
        self.spell_save_dc_2_var.set(value=model.spell_save_dc_2)
        self.spells_per_day_2_var.set(value=model.spells_per_day_2)
        self.spell_bonus_2_var.set(value=model.spell_bonus_2)
        self.spells_known_3_var.set(value=model.spells_known_3)
        self.spell_save_dc_3_var.set(value=model.spell_save_dc_3)
        self.spells_per_day_3_var.set(value=model.spells_per_day_3)
        self.spell_bonus_3_var.set(value=model.spell_bonus_3)
        self.spells_known_4_var.set(value=model.spells_known_4)
        self.spell_save_dc_4_var.set(value=model.spell_save_dc_4)
        self.spells_per_day_4_var.set(value=model.spells_per_day_4)
        self.spell_bonus_4_var.set(value=model.spell_bonus_4)
        self.spells_known_5_var.set(value=model.spells_known_5)
        self.spell_save_dc_5_var.set(value=model.spell_save_dc_5)
        self.spells_per_day_5_var.set(value=model.spells_per_day_5)
        self.spell_bonus_5_var.set(value=model.spell_bonus_5)
        self.spells_known_6_var.set(value=model.spells_known_6)
        self.spell_save_dc_6_var.set(value=model.spell_save_dc_6)
        self.spells_per_day_6_var.set(value=model.spells_per_day_6)
        self.spell_bonus_6_var.set(value=model.spell_bonus_6)
        self.spells_known_7_var.set(value=model.spells_known_7)
        self.spell_save_dc_7_var.set(value=model.spell_save_dc_7)
        self.spells_per_day_7_var.set(value=model.spells_per_day_7)
        self.spell_bonus_7_var.set(value=model.spell_bonus_7)
        self.spells_known_8_var.set(value=model.spells_known_8)
        self.spell_save_dc_8_var.set(value=model.spell_save_dc_8)
        self.spells_per_day_8_var.set(value=model.spells_per_day_8)
        self.spell_bonus_8_var.set(value=model.spell_bonus_8)
        self.spells_known_9_var.set(value=model.spells_known_9)
        self.spell_save_dc_9_var.set(value=model.spell_save_dc_9)
        self.spells_per_day_9_var.set(value=model.spells_per_day_9)
        self.spell_bonus_9_var.set(value=model.spell_bonus_9)

    def init_data(self):
        model = self.controller.load_data_from_db()
        self.controller.size_mod()
        self.cmb_calculation()
        self.cmd_calculation()
        self.ac_calculation()
        self.pull_data(model)

    def calculate_str_mod(self):
        try:
            str_score = int(self.str_ability_score.get())
            str_inc = int(self.str_ability_increase.get())
            str_others = int(self.str_other_mod_var.get())
            model = self.controller.calculate_mod('str', str_score, str_inc, str_others)

            self.cmb_calculation()
            self.cmd_calculation()

            self.pull_data(model)
        except ValueError:
            pass

    def calculate_dex_mod(self):
        try:
            dex_score = int(self.dex_ability_score.get())
            dex_inc = int(self.dex_ability_increase.get())
            dex_others = int(self.dex_other_mod_var.get())
            model = self.controller.calculate_mod('dex', dex_score, dex_inc, dex_others)

            self.ac_calculation()
            self.init_calculation()
            self.ref_calculation()
            self.cmd_calculation()

            self.pull_data(model)
        except ValueError:
            pass

    def calculate_con_mod(self):
        try:
            con_score = int(self.con_ability_score.get())
            con_inc = int(self.con_ability_increase.get())
            con_others = int(self.con_other_mod_var.get())
            model = self.controller.calculate_mod('con', con_score, con_inc, con_others)

            self.fort_calculation()

            self.pull_data(model)
        except ValueError:
            pass

    def calculate_int_mod(self):
        try:
            int_score = int(self.int_ability_score.get())
            int_inc = int(self.int_ability_increase.get())
            int_others = int(self.int_other_mod_var.get())
            model = self.controller.calculate_mod('int', int_score, int_inc, int_others)

            self.pull_data(model)
        except ValueError:
            pass

    def calculate_wis_mod(self):
        try:
            wis_score = int(self.wis_ability_score.get())
            wis_inc = int(self.wis_ability_increase.get())
            wis_others = int(self.wis_other_mod_var.get())
            model = self.controller.calculate_mod('wis', wis_score, wis_inc, wis_others)

            self.will_calculation()

            self.pull_data(model)
        except ValueError:
            pass

    def calculate_cha_mod(self):
        try:
            cha_score = int(self.cha_ability_score.get())
            cha_inc = int(self.cha_ability_increase.get())
            cha_others = int(self.cha_other_mod_var.get())
            model = self.controller.calculate_mod('cha', cha_score, cha_inc, cha_others)

            self.pull_data(model)
        except ValueError:
            pass

    def ac_calculation(self):
        self.controller.calculate_ac()

    def init_calculation(self):
        self.controller.calculate_initiative()

    def fort_calculation(self):
        self.controller.calculate_fortitude_save()

    def ref_calculation(self):
        self.controller.calculate_reflex_save()

    def will_calculation(self):
        self.controller.calculate_will_save()

    def cmb_calculation(self):
        self.controller.calculate_cmb()

    def cmd_calculation(self):
        self.controller.calculate_cmd()
